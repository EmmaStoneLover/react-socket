{"version":3,"sources":["config/Theme.jsx","config/MyBox.jsx","config/MyButton.jsx","config/MyLoadingButton.jsx","config/MyToggleButton.jsx","config/config.js","components/Text.jsx","components/Input.jsx","components/UserBox.jsx","components/Settings.jsx","components/EmmaStone.jsx","components/alise/Alise.jsx","Apple.jsx","index.js"],"names":["ColorModeContext","createContext","toggleColorMode","Theme","children","LSMode","localStorage","mode","config","standartMode","useState","setMode","darkQuery","useMediaQuery","light","ColorLS","colorLight","standartColor","dark","colorDark","color","setColor","right","COLORS","forEach","cl","name","useEffect","ststem","active","system","ColorLSDefiner","useCallback","toggleColorFunc","newColor","prev","toggleColor","theme","useMemo","createTheme","palette","primary","secondary","background","default","grey","myBox","colorMode","Mode","Color","colorDefiner","Provider","value","ThemeProvider","MyBox","propps","Box","sx","m","p","boxShadow","bSh","borderRadius","bgcolor","nobg","MyButton","Button","style","textTransform","MyLoadingButton","LoadingButton","MyToggleButton","ToggleButton","AUTH","socket","yellow","Name","blue","green","purple","orange","Text","text","setText","textSettings","setTextSettings","length","justifyContent","boxSizing","display","onClick","JSON","stringify","map","payload","index","Typography","component","className","user","message","variant","Input","end","setMessage","loading","setLoading","socketRef","useRef","current","io","connect","on","scrollIntoView","behavior","disconnect","handleSubmit","e","preventDefault","emit","username","onSubmit","Grid","container","item","xs","TextField","required","label","fullWidth","onChange","target","mt","textAlign","type","UserBox","logged","setLogged","password","login","input","setInput","error","setLabel","a","data","console","log","fetch","method","headers","body","json","res","userError","passwordError","fetchError","token","fetchData","marginLeft","mr","vlaue","Settings","modeChoise","setModeChoise","colorChoise","setColorChoise","ToggleButtonGroup","exclusive","_","choise","size","i","EmmaStone","setSettings","IconButton","AliseInput","Apple","parse","firstText","settings","useTheme","useContext","minHeight","Container","maxWidth","pt","to","href","path","element","ref","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a433c71.chunk.js","sourcesContent":["// eslint-disable-next-line\nimport { useMemo, useState, createContext, useCallback, useEffect } from 'react'\n// eslint-disable-next-line\nimport { ThemeProvider, createTheme } from '@mui/material/styles'\n// eslint-disable-next-line\nimport { grey, yellow, blue, green, purple, orange } from '@mui/material/colors'\nimport { useMediaQuery } from '@mui/material'\n\nimport config from './config'\n\nexport const ColorModeContext = createContext({ toggleColorMode: () => {} })\n\nexport default function Theme({ children }) {\n  // цвет из localStorage\n  const LSMode = localStorage.mode || config.standartMode\n  const [mode, setMode] = useState(LSMode)\n\n  // dark mode из localStorage\n  const darkQuery = useMediaQuery('(prefers-color-scheme: dark)')\n  // цвет primary и secondary для кнопок и всей хуйни\n  const [color, setColor] = useState({\n    light: ColorLS(localStorage.colorLight) || config.standartColor.light,\n    dark: ColorLS(localStorage.colorDark) || config.standartColor.dark,\n  })\n\n  // useEffect при изменении (prefers-color-scheme: dark)\n  useEffect(() => {\n    if (LSMode) {\n      if (LSMode === 'system') {\n        if (darkQuery) {\n          return setMode({ ststem: true, active: 'dark' })\n        } else {\n          return setMode({ ststem: true, active: 'light' })\n        }\n      } else if (LSMode === 'light') {\n        setMode({ system: false, active: 'light' })\n      } else if (LSMode === 'dark') {\n        setMode({ system: false, active: 'dark' })\n      }\n    } else return\n  }, [LSMode, darkQuery])\n\n  // функция ( localStorage.цвет -> цвет )\n  function ColorLS(color) {\n    let right = null\n    config.COLORS.forEach((cl) => {\n      if (color === cl.name) right = cl.color\n    })\n    return right\n  }\n  // функция ( цвет -> localStorage.цвет )\n  const ColorLSDefiner = useCallback((color) => {\n    let right = null\n    config.COLORS.forEach((cl) => {\n      if (color === cl.color) right = cl.name\n    })\n    return right\n  }, [])\n\n  // помогает toggleColor ниже\n  const toggleColorFunc = useCallback(\n    (mode, newColor) => {\n      if (mode === 'light') {\n        setColor((prev) => {\n          localStorage.colorLight = ColorLSDefiner(newColor)\n          return { light: newColor, dark: prev.dark }\n        })\n      } else {\n        setColor((prev) => {\n          localStorage.colorDark = ColorLSDefiner(newColor)\n          return { light: prev.light, dark: newColor }\n        })\n      }\n    },\n    [ColorLSDefiner]\n  )\n  // возвращает { цвет: { light: {}, dark: {} }, цвет: ... }\n  const toggleColor = useCallback(\n    (mode) => {\n      let right = {}\n      config.COLORS.forEach((cl) => {\n        right[cl.name] = () =>\n          toggleColorFunc(mode === 'light' ? 'light' : 'dark', cl.color)\n      })\n      return right\n    },\n    [toggleColorFunc]\n  )\n\n  // сама тема\n  const theme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: mode.active, // нихуя себе сам додумался до такого\n          ...(mode.active === 'light'\n            ? {\n                // light\n                primary: color.light,\n                secondary: color.light,\n                background: {\n                  default: grey[100],\n                  myBox: 'white',\n                },\n              }\n            : {\n                // dark\n                primary: color.dark,\n                secondary: color.dark,\n                background: {\n                  default: grey[900],\n                  myBox: 'rgb(255, 255, 255, 0.05)',\n                },\n              }),\n        },\n      }),\n    [mode, color]\n  )\n  // useContext функции\n  const colorMode = useMemo(\n    () => ({\n      Mode: {\n        system: () => {\n          localStorage.mode = 'system'\n          setMode({ ...mode, system: true })\n        },\n        light: () => {\n          localStorage.mode = 'light'\n          setMode({ system: false, active: 'light' })\n        },\n        dark: () => {\n          localStorage.mode = 'dark'\n          setMode({ system: false, active: 'dark' })\n        },\n      },\n      Color: {\n        light: toggleColor('light'),\n        dark: toggleColor('dark'),\n        // какой 'цвет' сейчас\n        colorDefiner: ColorLSDefiner(\n          theme.palette.mode === 'light' ? color.light : color.dark\n        ),\n      },\n    }),\n    [toggleColor, ColorLSDefiner, mode, color, theme.palette.mode]\n  )\n\n  return (\n    <ColorModeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </ColorModeContext.Provider>\n  )\n}\n","import Box from '@mui/material/Box'\n\nexport default function MyBox(propps) {\n  return (\n    <Box\n      {...propps}\n      sx={{\n        m: 2,\n        p: 2,\n        boxShadow: propps.bSh ? propps.bSh : 5,\n        borderRadius: 3,\n        bgcolor: propps.nobg ? null : 'background.myBox',\n      }}\n    >\n      {propps.children}\n    </Box>\n  )\n}\n","import Button from '@mui/material/Button'\n\nexport default function MyButton(propps) {\n  return (\n    <Button {...propps} style={{ textTransform: 'none' }}>\n      {propps.children}\n    </Button>\n  )\n}\n","import LoadingButton from '@mui/lab/LoadingButton'\n\nexport default function MyLoadingButton(propps) {\n  return (\n    <LoadingButton {...propps} style={{ textTransform: 'none' }}>\n      {propps.children}\n    </LoadingButton>\n  )\n}\n","import ToggleButton from '@mui/material/ToggleButton'\n\nexport default function MyToggleButton(propps) {\n  return (\n    <ToggleButton {...propps} style={{ textTransform: 'none' }}>\n      {propps.children}\n    </ToggleButton>\n  )\n}\n","import Theme from './Theme'\nimport MyBox from './MyBox'\nimport MyButton from './MyButton'\nimport MyLoadingButton from './MyLoadingButton'\nimport MyToggleButton from './MyToggleButton'\nimport { yellow, blue, green, purple, orange } from '@mui/material/colors'\n\nconst config = {\n  // AUTH: 'http://localhost:7000',\n  // socket: 'http://localhost:7000',\n  AUTH: 'https://emmastonenodejs.herokuapp.com',\n  socket: 'https://emmastonenodejs.herokuapp.com',\n\n  // socket: 'https://node7socket.herokuapp.com',\n\n  // Theme\n  COLORS: [\n    { name: 'yellow', color: yellow, Name: 'Yellow' },\n    { name: 'blue', color: blue, Name: 'Blue' },\n    { name: 'green', color: green, Name: 'Green' },\n    { name: 'purple', color: purple, Name: 'Purple' },\n    { name: 'orange', color: orange, Name: 'Orange' },\n  ],\n  standartMode: 'system',\n  standartColor: {\n    light: blue,\n    dark: yellow,\n  },\n}\n\nexport { Theme, MyBox, MyButton, MyLoadingButton, MyToggleButton }\n\nexport default config\n","// eslint-disable-next-line\nimport { useState } from 'react'\nimport '../css/App.css'\n// eslint-disable-next-line\nimport { Grid, Typography } from '@mui/material'\n// eslint-disable-next-line\nimport { MyBox, MyButton } from '../config/config'\n// eslint-disable-next-line\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp'\n\nexport default function Text({ text, setText }) {\n  const [textSettings, setTextSettings] = useState(false)\n\n  const setTextToLocalStorage = () => {\n    localStorage.text = JSON.stringify(text)\n    setTextSettings(false)\n  }\n  const deleteText = () => {\n    setText([])\n    delete localStorage.text\n  }\n\n  return (\n    <>\n      {text.length ? (\n        <MyBox>\n          <div\n            style={{\n              justifyContent: 'space-between',\n              boxSizing: 'border-box',\n              display: 'flex',\n            }}\n          >\n            <span>\n              {/* <MyButton onClick={() => console.log('жопа')}>\n                <KeyboardArrowUpIcon />\n                <span>more</span>\n              </MyButton> */}\n            </span>\n            <span>\n              {textSettings ? (\n                <>\n                  <MyButton color=\"error\" onClick={deleteText}>\n                    Delete text\n                  </MyButton>\n                  <MyButton onClick={setTextToLocalStorage}>Save text</MyButton>\n                </>\n              ) : null}\n              <MyButton onClick={() => setTextSettings((prev) => !prev)}>\n                •••\n              </MyButton>\n            </span>\n          </div>\n          <div>\n            {text.map((payload, index) => {\n              return (\n                <Typography\n                  component=\"p\"\n                  key={index}\n                  className={`\n                  textLeft\n                  ${payload.user === 'Миша' ? 'textRight' : null} \n                  ${payload.user === 'Emma Stone' ? 'textCenter' : null}\n                `}\n                >\n                  {payload.user !== null &&\n                  payload.user !== 'null' &&\n                  payload.user ? (\n                    <Typography component=\"b\" color=\"primary\">\n                      &nbsp; {payload.user}\n                    </Typography>\n                  ) : null}\n                  &nbsp; {payload.message} &nbsp;\n                </Typography>\n              )\n            })}\n          </div>\n        </MyBox>\n      ) : (\n        <>\n          <Typography variant=\"p\">Ничего тут нету</Typography>\n          <br />\n        </>\n      )}\n    </>\n  )\n}\n","import { useEffect, useState, useCallback, useRef } from 'react'\nimport { Grid, TextField } from '@mui/material'\nimport io from 'socket.io-client'\n\nimport config, { MyBox, MyLoadingButton } from '../config/config'\n\nconst Input = ({ text, setText, end }) => {\n  const [message, setMessage] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const socketRef = useRef()\n\n  useEffect(() => {\n    socketRef.current = io.connect(config.socket)\n    socketRef.current.on('message', (payload) => {\n      setText([...text, payload])\n      setLoading(false)\n    })\n    end.current.scrollIntoView({ behavior: 'smooth' })\n    return () => socketRef.current.disconnect()\n  }, [text, setText, end])\n\n  const handleSubmit = useCallback(\n    (e) => {\n      e.preventDefault()\n      setLoading(true)\n      socketRef.current.emit('message', {\n        message: message,\n        user: localStorage.username,\n      })\n      setMessage('')\n    },\n    [message]\n  )\n\n  return (\n    <MyBox>\n      <form onSubmit={handleSubmit}>\n        <Grid container sx={{ p: 1 }}>\n          <Grid item xs={10}>\n            <TextField\n              required\n              label=\"Вставить сюда\"\n              variant=\"outlined\"\n              value={message}\n              fullWidth\n              onChange={(e) => setMessage(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={2} sx={{ mt: '11px', textAlign: 'end' }}>\n            <MyLoadingButton\n              loading={loading}\n              type=\"submit\"\n              color=\"secondary\"\n              // variant=\"outlined\"\n            >\n              Send\n            </MyLoadingButton>\n          </Grid>\n        </Grid>\n      </form>\n    </MyBox>\n  )\n}\n\nexport default Input\n","import { TextField, Typography } from '@mui/material'\nimport { useState } from 'react'\n\nimport config, { MyBox, MyButton, MyLoadingButton } from '../config/config'\n\nexport default function UserBox({ logged, setLogged }) {\n  const [input, setInput] = useState({\n    password: '',\n    login: '',\n  })\n  const [label, setLabel] = useState({\n    error: { login: false, password: false },\n    login: 'логин Ноунейм',\n    password: 'пароль 1234',\n  })\n  const [loading, setLoading] = useState(false)\n\n  // отправка\n  async function fetchData() {\n    const data = {\n      username: input.login,\n      password: input.password,\n    }\n    console.log('Отправляю:', data)\n    const res = await (\n      await fetch(`${config.AUTH}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8',\n        },\n        body: JSON.stringify(data),\n      })\n    ).json()\n    console.log('Пришло:', res)\n    if (res.username && !res.userError && !res.passwordError) {\n      localStorage.username = res.username\n      localStorage.token = res.token\n      console.log('Все збс', localStorage)\n      setLogged(true)\n    } else fetchError(res)\n  }\n  // при ошибке\n  function fetchError(res) {\n    if (res.userError) {\n      setLabel({\n        error: { login: true, password: true },\n        login: res.userError,\n        password: 'и пароль твой говно',\n      })\n    } else if (res.passwordError) {\n      setLabel({\n        error: { login: false, password: true },\n        login: 'ты тупой, ',\n        password: res.passwordError,\n      })\n    }\n    setLoading(false)\n  }\n  // выход\n  function handleLogOut() {\n    delete localStorage.username\n    delete localStorage.token\n    console.log(localStorage)\n    setLoading(false)\n    setLogged(false)\n    setInput({ login: '', password: '' })\n    setLabel({\n      error: { login: false, password: false },\n      login: 'логин Ноунейм',\n      password: 'пароль 1234',\n    })\n  }\n\n  // жопа\n  function handleSubmit(e) {\n    e.preventDefault()\n    setLoading(true)\n    fetchData()\n    setInput((prev) => {\n      return { login: prev.login, password: '' }\n    })\n  }\n\n  return (\n    <MyBox>\n      {!logged ? (\n        <>\n          <form onSubmit={(e) => handleSubmit(e)}>\n            <Typography variant=\"label\" sx={{ mr: '25px' }}>\n              Эй ю ты кто? а\n            </Typography>\n            <MyLoadingButton\n              loading={loading}\n              type=\"submit\"\n              color=\"secondary\"\n              variant=\"outlined\"\n            >\n              Вoйти\n            </MyLoadingButton>\n            <br />\n            <br />\n            <TextField\n              required\n              fullWidth\n              type=\"username\"\n              error={label.error.login}\n              label={label.login}\n              vlaue={input.login}\n              onChange={(e) =>\n                setInput((prev) => {\n                  return { login: e.target.value, password: prev.password }\n                })\n              }\n            />\n            <br />\n            <br />\n            <TextField\n              required\n              fullWidth\n              type=\"password\"\n              error={label.error.password}\n              label={label.password}\n              value={input.password}\n              onChange={(e) =>\n                setInput((prev) => {\n                  return { login: prev.login, password: e.target.value }\n                })\n              }\n            />\n          </form>\n        </>\n      ) : (\n        <div style={{ textAlign: 'end' }}>\n          <Typography variant=\"label\">\n            {input.login !== '' ? input.login : localStorage.username} &nbsp;\n            &nbsp;\n          </Typography>\n          <MyButton\n            style={{ marginLeft: 10 }}\n            color=\"secondary\"\n            variant=\"text\"\n            onClick={handleLogOut}\n          >\n            Выйти\n          </MyButton>\n        </div>\n      )}\n    </MyBox>\n  )\n}\n","import '../css/App.css'\n// eslint-disable-next-line\nimport { useEffect, useState } from 'react'\n// eslint-disable-next-line\nimport { FormControlLabel, Switch, Button } from '@mui/material'\n// eslint-disable-next-line\nimport { ToggleButtonGroup } from '@mui/material'\n// eslint-disable-next-line\nimport config, { MyButton, MyBox, MyToggleButton } from '../config/config'\n// eslint-disable-next-line\nimport Brightness4Icon from '@mui/icons-material/Brightness4'\n// eslint-disable-next-line\nimport DarkModeIcon from '@mui/icons-material/DarkMode'\n// eslint-disable-next-line\nimport LightModeIcon from '@mui/icons-material/LightMode'\n\nexport default function Settings({ theme, colorMode }) {\n  // все для mode\n  const [modeChoise, setModeChoise] = useState(() => {\n    if (localStorage.mode === 'system') return 'system'\n    if (localStorage.mode === 'light') return 'light'\n    if (localStorage.mode === 'dark') return 'dark'\n    else return config.standartMode\n  })\n  const handleModeChoise = (_, choise) => {\n    if (choise === 'system') {\n      colorMode.Mode.system()\n      setModeChoise(choise)\n    } else if (choise === 'light') {\n      colorMode.Mode.light()\n      setModeChoise(choise)\n    } else if (choise === 'dark') {\n      colorMode.Mode.dark()\n      setModeChoise(choise)\n    }\n  }\n\n  // все для color\n  const [colorChoise, setColorChoise] = useState()\n  const handleColorChoise = (_, choise) => {\n    try {\n      if (modeChoise === 'system') {\n        if (theme.palette.mode === 'light') {\n          colorMode.Color.light[choise]()\n          setColorChoise(choise)\n        } else {\n          colorMode.Color.dark[choise]()\n          setColorChoise(choise)\n        }\n      } else if (modeChoise === 'light') {\n        colorMode.Color.light[choise]()\n        setColorChoise(choise)\n      } else if (modeChoise === 'dark') {\n        colorMode.Color.dark[choise]()\n        setColorChoise(choise)\n      }\n    } catch {\n      return\n    }\n  }\n  // будет менять цвет colorChoise при изменении темы\n  useEffect(() => {\n    if (theme.palette.mode === 'light') {\n      setColorChoise(colorMode.Color.colorDefiner)\n    } else {\n      setColorChoise(colorMode.Color.colorDefiner)\n    }\n    return colorMode.Color.colorDefiner\n  }, [colorMode.Color, theme.palette.mode])\n\n  return (\n    <MyBox>\n      <ToggleButtonGroup\n        color=\"primary\"\n        exclusive\n        value={modeChoise}\n        onChange={handleModeChoise}\n      >\n        <MyToggleButton value=\"system\">\n          System &nbsp;\n          <Brightness4Icon />\n        </MyToggleButton>\n        <MyToggleButton value=\"light\">\n          <LightModeIcon />\n        </MyToggleButton>\n        <MyToggleButton value=\"dark\">\n          <DarkModeIcon />\n        </MyToggleButton>\n      </ToggleButtonGroup>\n\n      <br />\n      <br />\n\n      <ToggleButtonGroup\n        size=\"small\"\n        color=\"primary\"\n        exclusive\n        value={colorChoise}\n        onChange={handleColorChoise}\n      >\n        {config.COLORS.map((cl, i) => {\n          return (\n            <MyToggleButton value={cl.name} key={i}>\n              {cl.Name}\n            </MyToggleButton>\n          )\n        })}\n      </ToggleButtonGroup>\n    </MyBox>\n  )\n}\n","// eslint-disable-next-line\nimport React from 'react'\n// eslint-disable-next-line\nimport { IconButton, Typography } from '@mui/material'\n// eslint-disable-next-line\nimport { MyBox } from '../config/config'\n// eslint-disable-next-line\nimport SettingsIcon from '@mui/icons-material/Settings'\n\nexport default function EmmaStone({ setSettings }) {\n  return (\n    <MyBox bSh={'0px'} nobg={true}>\n      <Typography variant=\"h4\">\n        Emma Stone &nbsp;\n        <IconButton\n          color=\"primary\"\n          onClick={() => setSettings((prev) => !prev)}\n        >\n          <SettingsIcon />\n        </IconButton>\n      </Typography>\n    </MyBox>\n  )\n}\n","import { Typography } from '@mui/material'\nimport React from 'react'\nimport MyBox from '../../config/MyBox'\n\nexport default function AliseInput() {\n  return (\n    <MyBox>\n      <Typography variant=\"h4\">Жопа</Typography>\n    </MyBox>\n  )\n}\n","// eslint-disable-next-line\nimport { useState, useContext, useRef } from 'react'\n// eslint-disable-next-line\nimport { Container, Box } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n// eslint-disable-next-line\nimport Text from './components/Text'\nimport Input from './components/Input'\nimport UserBox from './components/UserBox'\nimport Settings from './components/Settings'\nimport EmmaStone from './components/EmmaStone'\nimport { ColorModeContext } from './config/Theme'\n// eslint-disable-next-line\nimport { MyButton } from './config/config'\n\nimport {\n  // BrowserRouter as Router,\n  Link,\n  Route,\n  Routes,\n  HashRouter,\n} from 'react-router-dom'\nimport Alise from './components/alise/Alise'\n\nexport default function Apple() {\n  const firstText = () => {\n    try {\n      return JSON.parse(localStorage.text)\n    } catch {\n      return []\n    }\n  }\n  const [text, setText] = useState(firstText() || [])\n  const [logged, setLogged] = useState(() => {\n    return localStorage.username &&\n      localStorage.username !== null &&\n      localStorage.username !== 'null'\n      ? true\n      : false\n  })\n\n  const [settings, setSettings] = useState(false)\n  const theme = useTheme()\n  const colorMode = useContext(ColorModeContext)\n\n  const end = useRef()\n  const sxBox = {\n    bgcolor: 'background.default',\n    color: 'text.primary',\n    minHeight: '100vh',\n  }\n\n  return (\n    <Box sx={sxBox}>\n      <Container className=\"App\" maxWidth=\"sm\" sx={{ pt: 5 }}>\n        <EmmaStone setSettings={setSettings} />\n        {settings ? <Settings theme={theme} colorMode={colorMode} /> : null}\n        <UserBox\n          logged={logged}\n          setLogged={setLogged}\n          text={text}\n          setText={setText}\n        />\n        <HashRouter>\n          <Link to=\"/\">Home</Link> <Link to=\"/alise\">Alise</Link>\n          <br />\n          <a href=\"https://emmastonelover.github.io/react-socket/\">Home</a>{' '}\n          <a href=\"https://emmastonelover.github.io/react-socket/#/alise\">\n            Alise\n          </a>\n          <br />\n          <Routes>\n            <Route\n              path=\"*\"\n              element={\n                <>\n                  {/* {logged ? <Text text={text} setText={setText} /> : null}\n                  {logged ? (\n                    <Input text={text} setText={setText} end={end} />\n                  ) : null} */}\n                  <Text text={text} setText={setText} />\n                  <Input text={text} setText={setText} end={end} />\n                </>\n              }\n            />\n            <Route path=\"/alise\" element={<Alise />} />\n          </Routes>\n        </HashRouter>\n      </Container>\n      <br ref={end} />\n    </Box>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/index.css'\n\nimport Apple from './Apple.jsx'\nimport Theme from './config/Theme'\n\nReactDOM.render(\n  <Theme>\n    <Apple />\n  </Theme>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}