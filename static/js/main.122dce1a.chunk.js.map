{"version":3,"sources":["config/MyBox.jsx","config/MyButton.jsx","components/Text.jsx","config/Theme.jsx","config/MyLoadingButton.jsx","config/MyToggleButton.jsx","config/config.js","components/Input.jsx","components/UserBox.jsx","components/Settings.jsx","Apple.jsx","index.js"],"names":["MyBox","propps","Box","sx","m","p","boxShadow","borderRadius","bgcolor","children","MyButton","Button","style","textTransform","Text","text","setText","useState","textSettings","setTextSettings","length","map","payload","index","Typography","component","className","user","color","message","Grid","container","textAlign","item","xs","onClick","prev","localStorage","JSON","stringify","variant","ColorModeContext","createContext","toggleColorMode","COLORS","name","yellow","Name","blue","green","purple","orange","Theme","LSMode","mode","darkQuery","useMediaQuery","setMode","useEffect","ststem","active","system","light","ColorLocalStorage","colorLight","dark","colorDark","setColor","right","forEach","cl","ColorLocalStorageDefiner","useCallback","toggleColorFunc","newColor","toggleColor","colorMode","useMemo","Mode","Color","theme","createTheme","palette","primary","secondary","background","default","grey","myBox","Provider","value","ThemeProvider","MyLoadingButton","LoadingButton","MyToggleButton","ToggleButton","config","AUTH","socket","Input","end","setMessage","loading","setLoading","socketRef","useRef","current","io","connect","on","scrollIntoView","behavior","disconnect","handleSubmit","e","preventDefault","emit","username","onSubmit","TextField","required","label","fullWidth","onChange","target","mt","type","UserBox","logged","setLogged","userInput","setUserInput","passwordInput","setPasswordInput","a","data","password","console","log","fetch","method","headers","body","json","res","userError","passwordError","token","fetchData","marginLeft","marginRight","maxWidth","vlaue","Settings","modeChoise","setModeChoise","colorChoise","setColorChoise","ToggleButtonGroup","exclusive","_","choise","size","i","Apple","parse","firstText","useTheme","useContext","minHeight","Container","ref","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.122dce1a.chunk.js","sourcesContent":["import Box from '@mui/material/Box'\n\nexport default function MyBox(propps) {\n  return (\n    <Box\n      {...propps}\n      sx={{\n        m: 2,\n        p: 2,\n        boxShadow: 5,\n        borderRadius: 3,\n        bgcolor: 'background.myBox',\n      }}\n    >\n      {propps.children}\n    </Box>\n  )\n}\n","import Button from '@mui/material/Button'\n\nexport default function MyButton(propps) {\n  return (\n    <Button {...propps} style={{ textTransform: 'none' }}>\n      {propps.children}\n    </Button>\n  )\n}\n","import { useState } from 'react'\nimport '../css/App.css'\n\nimport MyBox from '../config/MyBox'\nimport { Button, Grid, Typography } from '@mui/material'\n\nimport MyButton from '../config/MyButton'\n\nexport default function Text({ text, setText }) {\n  const [textSettings, setTextSettings] = useState(false)\n\n  const setTextToLocalStorage = () => {\n    localStorage.text = JSON.stringify(text)\n    setTextSettings(false)\n  }\n  const deleteText = () => {\n    setText([])\n    delete localStorage.text\n  }\n\n  return (\n    <>\n      {text.length ? (\n        <MyBox>\n          {text.map((payload, index) => {\n            return (\n              <Typography\n                component=\"p\"\n                key={index}\n                className={`\n              textLeft\n              ${payload.user === 'Миша' ? 'textRight' : ''} \n              ${payload.user === 'Emma Stone' ? 'textCenter' : ''}\n              `}\n              >\n                {payload.user !== null &&\n                payload.user !== 'null' &&\n                payload.user ? (\n                  <Typography component=\"b\" color=\"primary\">\n                    &nbsp; {payload.user} &nbsp;\n                  </Typography>\n                ) : (\n                  ''\n                )}\n                {payload.message}\n              </Typography>\n            )\n          })}\n          <br />\n          <div>\n            <Grid container style={{ textAlign: 'start' }}>\n              <Grid item xs={2}>\n                <MyButton onClick={() => setTextSettings((prev) => !prev)}>\n                  •••\n                </MyButton>\n              </Grid>\n              {textSettings ? (\n                <Grid item xs={10}>\n                  &nbsp; &nbsp;\n                  <Button color=\"success\" onClick={setTextToLocalStorage}>\n                    Save text\n                  </Button>\n                  <Button color=\"error\" onClick={deleteText}>\n                    Delete text\n                  </Button>\n                </Grid>\n              ) : (\n                ''\n              )}\n            </Grid>\n          </div>\n        </MyBox>\n      ) : (\n        <div>\n          <Typography variant=\"p\">Ничего тут нету</Typography>\n          <br />\n        </div>\n      )}\n    </>\n  )\n}\n","// eslint-disable-next-line\nimport { useMemo, useState, createContext, useCallback, useEffect } from 'react'\n// eslint-disable-next-line\nimport { ThemeProvider, createTheme } from '@mui/material/styles'\n// eslint-disable-next-line\nimport {\n  grey,\n  yellow,\n  blue,\n  green,\n  purple,\n  orange,\n} from '@mui/material/colors'\nimport { useMediaQuery } from '@mui/material'\n\nexport const ColorModeContext = createContext({ toggleColorMode: () => {} })\nexport const COLORS = [\n  { name: 'yellow', color: yellow, Name: 'Yellow' },\n  { name: 'blue', color: blue, Name: 'Blue' },\n  { name: 'green', color: green, Name: 'Green' },\n  { name: 'purple', color: purple, Name: 'Purple' },\n  { name: 'orange', color: orange, Name: 'Orange' },\n]\n\nexport default function Theme({ children }) {\n  const LSMode = localStorage.mode || 'system'\n  // const LS = useMemo(() => {\n  //   const a = {\n  //     system: LSMode === 'system' ? true : false,\n  //     active: () => {\n  //       if (LSMode === 'light') return 'light'\n  //       if (LSMode === 'dark') return 'dark'\n  //       else return 'light'\n  //     },\n  //   }\n  //   return a\n  // }, [LSMode])\n\n  let darkQuery = useMediaQuery('(prefers-color-scheme: dark)')\n  const [mode, setMode] = useState(LSMode)\n\n  useEffect(() => {\n    if (LSMode) {\n      if (LSMode === 'system') {\n        if (darkQuery) {\n          return setMode({ ststem: true, active: 'dark' })\n        } else {\n          return setMode({ ststem: true, active: 'light' })\n        }\n      } else if (LSMode === 'light') {\n        setMode({ system: false, active: 'light' })\n      } else if (LSMode === 'dark') {\n        setMode({ system: false, active: 'dark' })\n      }\n    } else return\n  }, [LSMode, darkQuery])\n\n  const [color, setColor] = useState({\n    light: ColorLocalStorage(localStorage.colorLight) || blue,\n    dark: ColorLocalStorage(localStorage.colorDark) || green,\n  })\n  // console.log(color)\n  function ColorLocalStorage(color) {\n    let right = null\n    COLORS.forEach((cl) => {\n      if (color === cl.name) right = cl.color\n    })\n    return right\n  }\n  const ColorLocalStorageDefiner = useCallback((color) => {\n    let right = null\n    COLORS.forEach((cl) => {\n      if (color === cl.color) right = cl.name\n    })\n    return right\n  }, [])\n\n  const toggleColorFunc = useCallback(\n    (mode, newColor) => {\n      if (mode === 'light') {\n        setColor((prev) => {\n          localStorage.colorLight = ColorLocalStorageDefiner(newColor)\n          return { light: newColor, dark: prev.dark }\n        })\n      } else {\n        setColor((prev) => {\n          localStorage.colorDark = ColorLocalStorageDefiner(newColor)\n          return { light: prev.light, dark: newColor }\n        })\n      }\n    },\n    [ColorLocalStorageDefiner]\n  )\n  const toggleColor = useCallback(\n    (mode) => {\n      let right = {}\n      COLORS.forEach((cl) => {\n        right[cl.name] = () =>\n          toggleColorFunc(mode === 'light' ? 'light' : 'dark', cl.color)\n      })\n      return right\n    },\n    [toggleColorFunc]\n  )\n\n  const colorMode = useMemo(\n    () => ({\n      Mode: {\n        system: () => {\n          localStorage.mode = 'system'\n          setMode({ ...mode, system: true })\n        },\n        light: () => {\n          localStorage.mode = 'light'\n          setMode({ system: false, active: 'light' })\n        },\n        dark: () => {\n          localStorage.mode = 'dark'\n          setMode({ system: false, active: 'dark' })\n        },\n      },\n      Color: {\n        light: toggleColor('light'),\n        dark: toggleColor('dark'),\n      },\n    }),\n    [toggleColor, mode]\n  )\n\n  const theme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: mode.active,\n          ...(mode.active === 'light'\n            ? {\n                // light\n                primary: color.light,\n                secondary: color.light,\n                background: {\n                  default: grey[100],\n                  myBox: 'white',\n                },\n              }\n            : {\n                // dark\n                primary: color.dark,\n                secondary: color.dark,\n                background: {\n                  default: grey[900],\n                  myBox: 'rgb(255, 255, 255, 0.05)',\n                },\n              }),\n        },\n      }),\n    [mode, color]\n  )\n\n  return (\n    <ColorModeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </ColorModeContext.Provider>\n  )\n}\n","import LoadingButton from '@mui/lab/LoadingButton'\n\nexport default function MyLoadingButton(propps) {\n  return (\n    <LoadingButton {...propps} style={{ textTransform: 'none' }}>\n      {propps.children}\n    </LoadingButton>\n  )\n}\n","import ToggleButton from '@mui/material/ToggleButton'\n\nexport default function MyToggleButton(propps) {\n  return (\n    <ToggleButton {...propps} style={{ textTransform: 'none' }}>\n      {propps.children}\n    </ToggleButton>\n  )\n}\n","import Theme from './Theme'\nimport MyBox from './MyBox'\nimport MyButton from './MyButton'\nimport MyLoadingButton from './MyLoadingButton'\nimport MyToggleButton from './MyToggleButton'\n\nconst config = {\n  AUTH: 'https://emmastonenodejs.herokuapp.com',\n  socket: 'https://node7socket.herokuapp.com',\n}\n\nexport { Theme, MyBox, MyButton, MyLoadingButton, MyToggleButton }\n\nexport default config\n","import { useEffect, useState, useCallback, useRef } from 'react'\nimport { Grid, TextField } from '@mui/material'\nimport io from 'socket.io-client'\n\nimport config, { MyLoadingButton } from '../config/config'\n\nconst Input = ({ text, setText, end }) => {\n  const [message, setMessage] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const socketRef = useRef()\n\n  useEffect(() => {\n    socketRef.current = io.connect(config.socket)\n    socketRef.current.on('message', (payload) => {\n      setText([...text, payload])\n      setLoading(false)\n    })\n    end.current.scrollIntoView({ behavior: 'smooth' })\n    return () => socketRef.current.disconnect()\n  }, [text, setText, end])\n\n  const handleSubmit = useCallback(\n    (e) => {\n      e.preventDefault()\n      setLoading(true)\n      socketRef.current.emit('message', {\n        message: message,\n        user: localStorage.username,\n      })\n      setMessage('')\n    },\n    [message]\n  )\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container sx={{ p: 1 }}>\n        <Grid item xs={10}>\n          <TextField\n            required\n            label=\"Вставить сюда\"\n            variant=\"outlined\"\n            value={message}\n            fullWidth\n            onChange={(e) => setMessage(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={2} sx={{ mt: '11px', textAlign: 'end' }}>\n          <MyLoadingButton\n            loading={loading}\n            type=\"submit\"\n            color=\"secondary\"\n            // variant=\"outlined\"\n          >\n            Send\n          </MyLoadingButton>\n        </Grid>\n      </Grid>\n    </form>\n  )\n}\n\nexport default Input\n","import { TextField, Typography } from '@mui/material'\nimport { useState } from 'react'\n\nimport config, { MyButton, MyLoadingButton } from '../config/config'\n\nexport default function UserBox({ logged, setLogged }) {\n  const [userInput, setUserInput] = useState('')\n  const [passwordInput, setPasswordInput] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  async function fetchData() {\n    const data = {\n      username: userInput,\n      password: passwordInput,\n    }\n    console.log('Отправляю:', data)\n    const res = await (\n      await fetch(`${config.AUTH}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8',\n        },\n        body: JSON.stringify(data),\n      })\n    ).json()\n    console.log('Пришло:', res)\n    if (!res.userError && !res.passwordError && res.username) {\n      localStorage.username = res.username\n      localStorage.token = res.token\n      setLogged(true)\n      console.log('Все збс', localStorage)\n    } else {\n      setUserInput('')\n      setPasswordInput('')\n      setLogged(false)\n      setLoading(false)\n      console.log('Errreeeeeeeeooeoeoeoeooeoeoeor')\n    }\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    setLoading(true)\n    fetchData()\n  }\n  function handleLogOut() {\n    delete localStorage.username\n    delete localStorage.token\n    setLoading(false)\n    console.log(localStorage)\n    setLogged(false)\n    setUserInput('')\n    setPasswordInput('')\n  }\n\n  return (\n    <div>\n      {!logged ? (\n        <>\n          <form onSubmit={(e) => handleSubmit(e)}>\n            <Typography variant=\"label\" style={{ marginRight: 25 }}>\n              Эй ю ты кто? а\n            </Typography>\n            <MyLoadingButton\n              loading={loading}\n              type=\"submit\"\n              color=\"secondary\"\n              variant=\"outlined\"\n            >\n              Вoйти\n            </MyLoadingButton>\n            <br />\n            <br />\n            <TextField\n              required\n              fullWidth\n              style={{ maxWidth: 500 }}\n              type=\"username\"\n              label=\"логин Ноунейм\"\n              vlaue={userInput}\n              onChange={(e) => setUserInput(e.target.value)}\n            />\n            <br />\n            <br />\n            <TextField\n              required\n              fullWidth\n              style={{ maxWidth: 500 }}\n              type=\"password\"\n              label=\"пароль 1234\"\n              value={passwordInput}\n              onChange={(e) => setPasswordInput(e.target.value)}\n            />\n          </form>\n        </>\n      ) : (\n        <>\n          <Typography variant=\"label\">\n            {localStorage.username} &nbsp; &nbsp;\n          </Typography>\n          <MyButton\n            style={{ marginLeft: 10 }}\n            color=\"secondary\"\n            variant=\"outlined\"\n            onClick={handleLogOut}\n          >\n            Выйти\n          </MyButton>\n        </>\n      )}\n    </div>\n  )\n}\n","// eslint-disable-next-line\nimport { useState } from 'react'\n// eslint-disable-next-line\nimport { FormControlLabel, Switch, Button } from '@mui/material'\n// eslint-disable-next-line\nimport { ToggleButtonGroup } from '@mui/material'\n// eslint-disable-next-line\nimport { COLORS } from '../config/Theme'\n// eslint-disable-next-line\nimport DarkModeIcon from '@mui/icons-material/DarkMode'\n// eslint-disable-next-line\nimport { MyButton, MyBox, MyToggleButton } from '../config/config'\nimport '../css/App.css'\n\nexport default function Settings({ theme, colorMode }) {\n  const [modeChoise, setModeChoise] = useState(() => {\n    if (localStorage.mode === 'system') return 'system'\n    if (localStorage.mode === 'light') return 'light'\n    if (localStorage.mode === 'dark') return 'dark'\n    else return 'system'\n  })\n  const handleModeChoise = (_, choise) => {\n    if (choise === 'system') {\n      colorMode.Mode.system()\n      setModeChoise(choise)\n    } else if (choise === 'light') {\n      colorMode.Mode.light()\n      setModeChoise(choise)\n    } else if (choise === 'dark') {\n      colorMode.Mode.dark()\n      setModeChoise(choise)\n    }\n  }\n\n  const [colorChoise, setColorChoise] = useState()\n  const handleColorChoise = (_, choise) => {\n    try {\n      if (modeChoise === 'system') {\n        if (modeChoise === 'light') {\n          colorMode.Color.light[choise]()\n          setColorChoise(choise)\n        } else {\n          colorMode.Color.dark[choise]()\n          setColorChoise(choise)\n        }\n      } else if (modeChoise === 'light') {\n        colorMode.Color.light[choise]()\n        setColorChoise(choise)\n      } else if (modeChoise === 'dark') {\n        colorMode.Color.dark[choise]()\n        setColorChoise(choise)\n      }\n    } catch {\n      return\n    }\n  }\n\n  return (\n    <MyBox>\n      <ToggleButtonGroup\n        color=\"primary\"\n        exclusive\n        value={modeChoise}\n        onChange={handleModeChoise}\n      >\n        <MyToggleButton value=\"system\">System</MyToggleButton>\n        <MyToggleButton value=\"light\">Light</MyToggleButton>\n        <MyToggleButton value=\"dark\">Dark</MyToggleButton>\n      </ToggleButtonGroup>\n\n      <br />\n      <br />\n\n      <ToggleButtonGroup\n        size=\"small\"\n        color=\"primary\"\n        exclusive\n        value={colorChoise}\n        onChange={handleColorChoise}\n      >\n        {COLORS.map((cl, i) => {\n          return (\n            <MyToggleButton value={cl.name} key={i}>\n              {cl.Name}\n            </MyToggleButton>\n          )\n        })}\n      </ToggleButtonGroup>\n    </MyBox>\n  )\n}\n","import { useState, useContext, useRef } from 'react'\nimport { Container, Typography, Box } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\nimport Text from './components/Text'\nimport Input from './components/Input'\nimport UserBox from './components/UserBox'\nimport Settings from './components/Settings'\nimport { ColorModeContext } from './config/Theme'\n\nimport { MyBox } from './config/config'\n\nexport default function Apple() {\n  const firstText = () => {\n    try {\n      return JSON.parse(localStorage.text)\n    } catch {\n      return []\n    }\n  }\n  const [text, setText] = useState(firstText() || [])\n  const [logged, setLogged] = useState(() => {\n    return localStorage.username &&\n      localStorage.username !== null &&\n      localStorage.username !== 'null'\n      ? true\n      : false\n  })\n\n  const theme = useTheme()\n  const colorMode = useContext(ColorModeContext)\n\n  const end = useRef()\n\n  return (\n    <Box\n      sx={{\n        bgcolor: 'background.default',\n        color: 'text.primary',\n        minHeight: '100vh',\n      }}\n    >\n      <Container className=\"App\" maxWidth=\"sm\">\n        <br />\n        <br />\n        <Typography variant=\"h4\">Emma Stone</Typography>\n        <br />\n        <Settings theme={theme} colorMode={colorMode} />\n        <MyBox>\n          <UserBox\n            logged={logged}\n            setLogged={setLogged}\n            text={text}\n            setText={setText}\n          />\n        </MyBox>\n        <Text text={text} setText={setText} />\n        <MyBox>\n          <Input text={text} setText={setText} end={end} />\n        </MyBox>\n      </Container>\n      <br ref={end} />\n    </Box>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/index.css'\n\nimport Apple from './Apple.jsx'\nimport Theme from './config/Theme'\n\nReactDOM.render(\n  <Theme>\n    <Apple />\n  </Theme>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}