{"version":3,"sources":["config/MyBox.jsx","config/MyButton.jsx","components/Text.jsx","config/Theme.jsx","config/MyLoadingButton.jsx","config/MyToggleButton.jsx","config/config.js","components/Input.jsx","components/UserBox.jsx","components/Settings.jsx","Apple.jsx","index.js"],"names":["MyBox","propps","Box","sx","m","p","boxShadow","borderRadius","bgcolor","children","MyButton","Button","style","textTransform","Text","text","setText","useState","textSettings","setTextSettings","length","map","payload","index","Typography","component","className","user","color","message","Grid","container","textAlign","item","xs","onClick","prev","localStorage","JSON","stringify","variant","ColorModeContext","createContext","toggleColorMode","Theme","LSMode","mode","config","standartMode","setMode","darkQuery","useMediaQuery","light","ColorLS","colorLight","standartColor","dark","colorDark","setColor","right","COLORS","forEach","cl","name","useEffect","ststem","active","system","ColorLSDefiner","useCallback","toggleColorFunc","newColor","toggleColor","theme","useMemo","createTheme","palette","primary","secondary","background","default","grey","myBox","colorMode","Mode","Color","colorDefiner","Provider","value","ThemeProvider","MyLoadingButton","LoadingButton","MyToggleButton","ToggleButton","AUTH","socket","yellow","Name","blue","green","purple","orange","Input","end","setMessage","loading","setLoading","socketRef","useRef","current","io","connect","on","scrollIntoView","behavior","disconnect","handleSubmit","e","preventDefault","emit","username","onSubmit","TextField","required","label","fullWidth","onChange","target","mt","type","UserBox","logged","setLogged","password","login","input","setInput","error","setLabel","a","data","console","log","fetch","method","headers","body","json","res","userError","passwordError","fetchError","token","fetchData","marginLeft","mr","vlaue","Settings","modeChoise","setModeChoise","colorChoise","setColorChoise","ToggleButtonGroup","exclusive","_","choise","size","i","Apple","parse","firstText","useTheme","useContext","minHeight","Container","maxWidth","ref","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa9b29f8.chunk.js","sourcesContent":["import Box from '@mui/material/Box'\n\nexport default function MyBox(propps) {\n  return (\n    <Box\n      {...propps}\n      sx={{\n        m: 2,\n        p: 2,\n        boxShadow: 5,\n        borderRadius: 3,\n        bgcolor: 'background.myBox',\n      }}\n    >\n      {propps.children}\n    </Box>\n  )\n}\n","import Button from '@mui/material/Button'\n\nexport default function MyButton(propps) {\n  return (\n    <Button {...propps} style={{ textTransform: 'none' }}>\n      {propps.children}\n    </Button>\n  )\n}\n","import { useState } from 'react'\nimport '../css/App.css'\n\nimport MyBox from '../config/MyBox'\nimport { Button, Grid, Typography } from '@mui/material'\n\nimport MyButton from '../config/MyButton'\n\nexport default function Text({ text, setText }) {\n  const [textSettings, setTextSettings] = useState(false)\n\n  const setTextToLocalStorage = () => {\n    localStorage.text = JSON.stringify(text)\n    setTextSettings(false)\n  }\n  const deleteText = () => {\n    setText([])\n    delete localStorage.text\n  }\n\n  return (\n    <>\n      {text.length ? (\n        <MyBox>\n          {text.map((payload, index) => {\n            return (\n              <Typography\n                component=\"p\"\n                key={index}\n                className={`\n              textLeft\n              ${payload.user === 'Миша' ? 'textRight' : ''} \n              ${payload.user === 'Emma Stone' ? 'textCenter' : ''}\n              `}\n              >\n                {payload.user !== null &&\n                payload.user !== 'null' &&\n                payload.user ? (\n                  <Typography component=\"b\" color=\"primary\">\n                    &nbsp; {payload.user} &nbsp;\n                  </Typography>\n                ) : (\n                  ''\n                )}\n                {payload.message}\n              </Typography>\n            )\n          })}\n          <br />\n          <div>\n            <Grid container style={{ textAlign: 'start' }}>\n              <Grid item xs={2}>\n                <MyButton onClick={() => setTextSettings((prev) => !prev)}>\n                  •••\n                </MyButton>\n              </Grid>\n              {textSettings ? (\n                <Grid item xs={10}>\n                  &nbsp; &nbsp;\n                  <Button color=\"success\" onClick={setTextToLocalStorage}>\n                    Save text\n                  </Button>\n                  <Button color=\"error\" onClick={deleteText}>\n                    Delete text\n                  </Button>\n                </Grid>\n              ) : (\n                ''\n              )}\n            </Grid>\n          </div>\n        </MyBox>\n      ) : (\n        <div>\n          <Typography variant=\"p\">Ничего тут нету</Typography>\n          <br />\n        </div>\n      )}\n    </>\n  )\n}\n","// eslint-disable-next-line\nimport { useMemo, useState, createContext, useCallback, useEffect } from 'react'\n// eslint-disable-next-line\nimport { ThemeProvider, createTheme } from '@mui/material/styles'\n// eslint-disable-next-line\nimport { grey, yellow, blue, green, purple, orange } from '@mui/material/colors'\nimport { useMediaQuery } from '@mui/material'\n\nimport config from './config'\n\nexport const ColorModeContext = createContext({ toggleColorMode: () => {} })\n\nexport default function Theme({ children }) {\n  // цвет из localStorage\n  const LSMode = localStorage.mode || config.standartMode\n  const [mode, setMode] = useState(LSMode)\n\n  // dark mode из localStorage\n  const darkQuery = useMediaQuery('(prefers-color-scheme: dark)')\n  // цвет primary и secondary для кнопок и всей хуйни\n  const [color, setColor] = useState({\n    light: ColorLS(localStorage.colorLight) || config.standartColor.light,\n    dark: ColorLS(localStorage.colorDark) || config.standartColor.dark,\n  })\n\n  // useEffect при изменении (prefers-color-scheme: dark)\n  useEffect(() => {\n    if (LSMode) {\n      if (LSMode === 'system') {\n        if (darkQuery) {\n          return setMode({ ststem: true, active: 'dark' })\n        } else {\n          return setMode({ ststem: true, active: 'light' })\n        }\n      } else if (LSMode === 'light') {\n        setMode({ system: false, active: 'light' })\n      } else if (LSMode === 'dark') {\n        setMode({ system: false, active: 'dark' })\n      }\n    } else return\n  }, [LSMode, darkQuery])\n\n  // функция ( localStorage.цвет -> цвет )\n  function ColorLS(color) {\n    let right = null\n    config.COLORS.forEach((cl) => {\n      if (color === cl.name) right = cl.color\n    })\n    return right\n  }\n  // функция ( цвет -> localStorage.цвет )\n  const ColorLSDefiner = useCallback((color) => {\n    let right = null\n    config.COLORS.forEach((cl) => {\n      if (color === cl.color) right = cl.name\n    })\n    return right\n  }, [])\n\n  // помогает toggleColor ниже\n  const toggleColorFunc = useCallback(\n    (mode, newColor) => {\n      if (mode === 'light') {\n        setColor((prev) => {\n          localStorage.colorLight = ColorLSDefiner(newColor)\n          return { light: newColor, dark: prev.dark }\n        })\n      } else {\n        setColor((prev) => {\n          localStorage.colorDark = ColorLSDefiner(newColor)\n          return { light: prev.light, dark: newColor }\n        })\n      }\n    },\n    [ColorLSDefiner]\n  )\n  // возвращает { цвет: { light: {}, dark: {} }, цвет: ... }\n  const toggleColor = useCallback(\n    (mode) => {\n      let right = {}\n      config.COLORS.forEach((cl) => {\n        right[cl.name] = () =>\n          toggleColorFunc(mode === 'light' ? 'light' : 'dark', cl.color)\n      })\n      return right\n    },\n    [toggleColorFunc]\n  )\n\n  // сама тема\n  const theme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: mode.active, // нихуя себе сам додумался до такого\n          ...(mode.active === 'light'\n            ? {\n                // light\n                primary: color.light,\n                secondary: color.light,\n                background: {\n                  default: grey[100],\n                  myBox: 'white',\n                },\n              }\n            : {\n                // dark\n                primary: color.dark,\n                secondary: color.dark,\n                background: {\n                  default: grey[900],\n                  myBox: 'rgb(255, 255, 255, 0.05)',\n                },\n              }),\n        },\n      }),\n    [mode, color]\n  )\n  // useContext функции\n  const colorMode = useMemo(\n    () => ({\n      Mode: {\n        system: () => {\n          localStorage.mode = 'system'\n          setMode({ ...mode, system: true })\n        },\n        light: () => {\n          localStorage.mode = 'light'\n          setMode({ system: false, active: 'light' })\n        },\n        dark: () => {\n          localStorage.mode = 'dark'\n          setMode({ system: false, active: 'dark' })\n        },\n      },\n      Color: {\n        light: toggleColor('light'),\n        dark: toggleColor('dark'),\n        // какой 'цвет' сейчас\n        colorDefiner: ColorLSDefiner(\n          theme.palette.mode === 'light' ? color.light : color.dark\n        ),\n      },\n    }),\n    [toggleColor, ColorLSDefiner, mode, color, theme.palette.mode]\n  )\n\n  return (\n    <ColorModeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </ColorModeContext.Provider>\n  )\n}\n","import LoadingButton from '@mui/lab/LoadingButton'\n\nexport default function MyLoadingButton(propps) {\n  return (\n    <LoadingButton {...propps} style={{ textTransform: 'none' }}>\n      {propps.children}\n    </LoadingButton>\n  )\n}\n","import ToggleButton from '@mui/material/ToggleButton'\n\nexport default function MyToggleButton(propps) {\n  return (\n    <ToggleButton {...propps} style={{ textTransform: 'none' }}>\n      {propps.children}\n    </ToggleButton>\n  )\n}\n","import Theme from './Theme'\nimport MyBox from './MyBox'\nimport MyButton from './MyButton'\nimport MyLoadingButton from './MyLoadingButton'\nimport MyToggleButton from './MyToggleButton'\nimport { yellow, blue, green, purple, orange } from '@mui/material/colors'\n\nconst config = {\n  AUTH: 'https://emmastonenodejs.herokuapp.com',\n  socket: 'https://node7socket.herokuapp.com',\n  // Theme\n  COLORS: [\n    { name: 'yellow', color: yellow, Name: 'Yellow' },\n    { name: 'blue', color: blue, Name: 'Blue' },\n    { name: 'green', color: green, Name: 'Green' },\n    { name: 'purple', color: purple, Name: 'Purple' },\n    { name: 'orange', color: orange, Name: 'Orange' },\n  ],\n  standartMode: 'system',\n  standartColor: {\n    light: blue,\n    dark: yellow,\n  },\n}\n\nexport { Theme, MyBox, MyButton, MyLoadingButton, MyToggleButton }\n\nexport default config\n","import { useEffect, useState, useCallback, useRef } from 'react'\nimport { Grid, TextField } from '@mui/material'\nimport io from 'socket.io-client'\n\nimport config, { MyLoadingButton } from '../config/config'\n\nconst Input = ({ text, setText, end }) => {\n  const [message, setMessage] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const socketRef = useRef()\n\n  useEffect(() => {\n    socketRef.current = io.connect(config.socket)\n    socketRef.current.on('message', (payload) => {\n      setText([...text, payload])\n      setLoading(false)\n    })\n    end.current.scrollIntoView({ behavior: 'smooth' })\n    return () => socketRef.current.disconnect()\n  }, [text, setText, end])\n\n  const handleSubmit = useCallback(\n    (e) => {\n      e.preventDefault()\n      setLoading(true)\n      socketRef.current.emit('message', {\n        message: message,\n        user: localStorage.username,\n      })\n      setMessage('')\n    },\n    [message]\n  )\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container sx={{ p: 1 }}>\n        <Grid item xs={10}>\n          <TextField\n            required\n            label=\"Вставить сюда\"\n            variant=\"outlined\"\n            value={message}\n            fullWidth\n            onChange={(e) => setMessage(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={2} sx={{ mt: '11px', textAlign: 'end' }}>\n          <MyLoadingButton\n            loading={loading}\n            type=\"submit\"\n            color=\"secondary\"\n            // variant=\"outlined\"\n          >\n            Send\n          </MyLoadingButton>\n        </Grid>\n      </Grid>\n    </form>\n  )\n}\n\nexport default Input\n","import { TextField, Typography } from '@mui/material'\nimport { useState } from 'react'\n\nimport config, { MyButton, MyLoadingButton } from '../config/config'\n\nexport default function UserBox({ logged, setLogged }) {\n  const [input, setInput] = useState({\n    password: '',\n    login: '',\n  })\n  const [label, setLabel] = useState({\n    error: { login: false, password: false },\n    login: 'логин Ноунейм',\n    password: 'пароль 1234',\n  })\n  const [loading, setLoading] = useState(false)\n\n  // отправка\n  async function fetchData() {\n    const data = {\n      username: input.login,\n      password: input.password,\n    }\n    console.log('Отправляю:', data)\n    const res = await (\n      await fetch(`${config.AUTH}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8',\n        },\n        body: JSON.stringify(data),\n      })\n    ).json()\n    console.log('Пришло:', res)\n    if (res.username && !res.userError && !res.passwordError) {\n      localStorage.username = res.username\n      localStorage.token = res.token\n      console.log('Все збс', localStorage)\n      setLogged(true)\n    } else fetchError(res)\n  }\n  // при ошибке\n  function fetchError(res) {\n    if (res.userError) {\n      setLabel({\n        error: { login: true, password: true },\n        login: res.userError,\n        password: 'и пароль твой говно',\n      })\n    } else if (res.passwordError) {\n      setLabel({\n        error: { login: false, password: true },\n        login: 'ты тупой, ',\n        password: res.passwordError,\n      })\n    }\n    setLoading(false)\n  }\n  // выход\n  function handleLogOut() {\n    delete localStorage.username\n    delete localStorage.token\n    console.log(localStorage)\n    setLoading(false)\n    setLogged(false)\n    setInput({ login: '', password: '' })\n    setLabel({\n      error: { login: false, password: false },\n      login: 'логин Ноунейм',\n      password: 'пароль 1234',\n    })\n  }\n\n  // жопа\n  function handleSubmit(e) {\n    e.preventDefault()\n    setLoading(true)\n    fetchData()\n    setInput((prev) => {\n      return { login: prev.login, password: '' }\n    })\n  }\n\n  return (\n    <div>\n      {!logged ? (\n        <>\n          <form onSubmit={(e) => handleSubmit(e)}>\n            <Typography variant=\"label\" sx={{ mr: '25px' }}>\n              Эй ю ты кто? а\n            </Typography>\n            <MyLoadingButton\n              loading={loading}\n              type=\"submit\"\n              color=\"secondary\"\n              variant=\"outlined\"\n            >\n              Вoйти\n            </MyLoadingButton>\n            <br />\n            <br />\n            <TextField\n              required\n              fullWidth\n              type=\"text\"\n              error={label.error.login}\n              label={label.login}\n              vlaue={input.login}\n              onChange={(e) =>\n                setInput((prev) => {\n                  return { login: e.target.value, password: prev.password }\n                })\n              }\n            />\n            <br />\n            <br />\n            <TextField\n              required\n              fullWidth\n              type=\"text\"\n              error={label.error.password}\n              label={label.password}\n              value={input.password}\n              onChange={(e) =>\n                setInput((prev) => {\n                  return { login: prev.login, password: e.target.value }\n                })\n              }\n            />\n          </form>\n        </>\n      ) : (\n        <>\n          <Typography variant=\"label\">\n            {localStorage.username} &nbsp; &nbsp;\n          </Typography>\n          <MyButton\n            style={{ marginLeft: 10 }}\n            color=\"secondary\"\n            variant=\"outlined\"\n            onClick={handleLogOut}\n          >\n            Выйти\n          </MyButton>\n        </>\n      )}\n    </div>\n  )\n}\n","import '../css/App.css'\n// eslint-disable-next-line\nimport { useEffect, useState } from 'react'\n// eslint-disable-next-line\nimport { FormControlLabel, Switch, Button } from '@mui/material'\n// eslint-disable-next-line\nimport { ToggleButtonGroup } from '@mui/material'\n// eslint-disable-next-line\nimport DarkModeIcon from '@mui/icons-material/DarkMode'\n// eslint-disable-next-line\nimport { MyButton, MyBox, MyToggleButton } from '../config/config'\nimport config from '../config/config'\n\nexport default function Settings({ theme, colorMode }) {\n  // все для mode\n  const [modeChoise, setModeChoise] = useState(() => {\n    if (localStorage.mode === 'system') return 'system'\n    if (localStorage.mode === 'light') return 'light'\n    if (localStorage.mode === 'dark') return 'dark'\n    else return config.standartMode\n  })\n  const handleModeChoise = (_, choise) => {\n    if (choise === 'system') {\n      colorMode.Mode.system()\n      setModeChoise(choise)\n    } else if (choise === 'light') {\n      colorMode.Mode.light()\n      setModeChoise(choise)\n    } else if (choise === 'dark') {\n      colorMode.Mode.dark()\n      setModeChoise(choise)\n    }\n  }\n\n  // все для color\n  const [colorChoise, setColorChoise] = useState()\n  const handleColorChoise = (_, choise) => {\n    try {\n      if (modeChoise === 'system') {\n        if (theme.palette.mode === 'light') {\n          colorMode.Color.light[choise]()\n          setColorChoise(choise)\n        } else {\n          colorMode.Color.dark[choise]()\n          setColorChoise(choise)\n        }\n      } else if (modeChoise === 'light') {\n        colorMode.Color.light[choise]()\n        setColorChoise(choise)\n      } else if (modeChoise === 'dark') {\n        colorMode.Color.dark[choise]()\n        setColorChoise(choise)\n      }\n    } catch {\n      return\n    }\n  }\n  // будет менять цвет colorChoise при изменении темы\n  useEffect(() => {\n    if (theme.palette.mode === 'light') {\n      setColorChoise(colorMode.Color.colorDefiner)\n    } else {\n      setColorChoise(colorMode.Color.colorDefiner)\n    }\n    return colorMode.Color.colorDefiner\n  }, [colorMode.Color, theme.palette.mode])\n\n  return (\n    <MyBox>\n      <ToggleButtonGroup\n        color=\"primary\"\n        exclusive\n        value={modeChoise}\n        onChange={handleModeChoise}\n      >\n        <MyToggleButton value=\"system\">System</MyToggleButton>\n        <MyToggleButton value=\"light\">Light</MyToggleButton>\n        <MyToggleButton value=\"dark\">Dark</MyToggleButton>\n      </ToggleButtonGroup>\n\n      <br />\n      <br />\n\n      <ToggleButtonGroup\n        size=\"small\"\n        color=\"primary\"\n        exclusive\n        value={colorChoise}\n        onChange={handleColorChoise}\n      >\n        {config.COLORS.map((cl, i) => {\n          return (\n            <MyToggleButton value={cl.name} key={i}>\n              {cl.Name}\n            </MyToggleButton>\n          )\n        })}\n      </ToggleButtonGroup>\n    </MyBox>\n  )\n}\n","import { useState, useContext, useRef } from 'react'\nimport { Container, Typography, Box } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\nimport Text from './components/Text'\nimport Input from './components/Input'\nimport UserBox from './components/UserBox'\nimport Settings from './components/Settings'\nimport { ColorModeContext } from './config/Theme'\n\nimport { MyBox } from './config/config'\n\nexport default function Apple() {\n  const firstText = () => {\n    try {\n      return JSON.parse(localStorage.text)\n    } catch {\n      return []\n    }\n  }\n  const [text, setText] = useState(firstText() || [])\n  const [logged, setLogged] = useState(() => {\n    return localStorage.username &&\n      localStorage.username !== null &&\n      localStorage.username !== 'null'\n      ? true\n      : false\n  })\n\n  const theme = useTheme()\n  const colorMode = useContext(ColorModeContext)\n\n  const end = useRef()\n\n  return (\n    <Box\n      sx={{\n        bgcolor: 'background.default',\n        color: 'text.primary',\n        minHeight: '100vh',\n      }}\n    >\n      <Container className=\"App\" maxWidth=\"sm\">\n        <br />\n        <br />\n        <Typography variant=\"h4\">Emma Stone</Typography>\n        <br />\n        <Settings theme={theme} colorMode={colorMode} />\n        <MyBox>\n          <UserBox\n            logged={logged}\n            setLogged={setLogged}\n            text={text}\n            setText={setText}\n          />\n        </MyBox>\n        <Text text={text} setText={setText} />\n        <MyBox>\n          <Input text={text} setText={setText} end={end} />\n        </MyBox>\n      </Container>\n      <br ref={end} />\n    </Box>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/index.css'\n\nimport Apple from './Apple.jsx'\nimport Theme from './config/Theme'\n\nReactDOM.render(\n  <Theme>\n    <Apple />\n  </Theme>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}